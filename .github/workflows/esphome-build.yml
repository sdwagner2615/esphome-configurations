# Used EP1's ESPHome build workflow as a reference:
# https://github.com/EverythingSmartHome/everything-presence-lite/blob/a760bb316415b1451f6f758ba52b0f2e3b96eb28/.github/workflows/esphome-build.yml
name: workflow-publish-esphome-firmware

on:
  workflow_call:
    inputs:
      clean:
        description: Remove deleted files from the build
        required: false
        type: boolean
        default: true
      esphome_version:
        description: Version of ESPHome to build for.
        required: false
        type: string
        default: latest  # By default, use the latest version of ESPHome.

jobs:
  # Split the comma-seperated input string into an array
  prepare:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
    steps:
      - uses: actions/checkout@v3.5.3
      - id: files-array
        run: |
          files=$(find . -maxdepth 1 -name '*.yaml' -printf '%f\n' | jq -R -s -c 'split("\n")[:-1]')
          echo "files=$files" >> $GITHUB_OUTPUT

  get-latest-versions:
    runs-on: ubuntu-latest
    outputs:
      esphome-version: ${{ steps.esphome-version.outputs.esphome_version }}
    steps:
      - id: esphome-version
        run: |
          if [ "${{ inputs.esphome_version }}" = "latest" ]; then
            latest=$(gh api repos/esphome/esphome/releases/latest --jq .tag_name)
            echo "esphome_version=$latest" >> $GITHUB_OUTPUT
          else
            echo "esphome_version=${{ inputs.esphome_version }}" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  build:
    name: build binary for ${{ matrix.file }}
    needs: [prepare, get-latest-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
    outputs:
      esphome-version: ${{ steps.esphome-build.outputs.esphome-version }}
      esphome-build-name: ${{ steps.esphome-build.outputs.name}}
      project-version: ${{ steps.esphome-build.outputs.project-version }}
      base_name: ${{ steps.set-names.outputs.name }}
      directory_name: ${{ steps.set-names.outputs.directory_name }}
    steps:
      - uses: actions/checkout@v3.5.3
      - name: update-project-version
        run: |
          esphome_version="${{ needs.get-latest-versions.outputs.esphome-version }}"
          # Extract current project version from device_base.yaml
          project_version=$(grep 'version:' common/device-base.yaml | head -1 | sed 's/.*version:[ ]*//;s/\"//g')
          new_version="$project_version-$esphome_version"
          sed -i "s/^\( *version: *\).*/\1$new_version/" common/device-base.yaml
      - uses: esphome/build-action@v6
        id: esphome-build
        with:
          yaml-file: ${{ matrix.file }}
          version: ${{ needs.get-latest-versions.outputs.esphome-version }}
          complete-manifest: true
      - id: set-names
        run: |
          base=$(basename "${{ matrix.file }}" .yaml)
          echo "directory_name=$base" >> $GITHUB_OUTPUT
          echo "base_name=$base" >> $GITHUB_OUTPUT
      - run: |
          mkdir output
          mv "${{ steps.esphome-build.outputs.name}}" "${{ steps.set-names.outputs.directory_name }}"
          mv "${{ steps.set-names.outputs.directory_name }}" output/
      - name: List output files
        run: ls -lR output
      - name: Compress OTA binary
        run: |
          bin_dir="output/${{ steps.set-names.outputs.directory_name }}"
          bin_file="$bin_dir/${{ steps.esphome-build.outputs.name }}.ota.bin"
          gz_file="output/${{ steps.set-names.outputs.directory_name }}/$(basename "${bin_file}")".gz
          if [ -f "$bin_file" ]; then
            gzip -c "$bin_file" > "$gz_file"
          else
            echo "File not found: $bin_file"
            ls -l "$bin_dir"
            exit 1
          fi
      - name: Update manifest for gzipped OTA and MD5
        run: |
          for manifest in output/*/manifest.json; do
            [ -f "$manifest" ] || continue
            gzfile="output/$(jq -r '.builds[].ota.path' "$manifest")"
            md5=$(md5sum "$gzfile" | awk '{print $1}')
            jq --arg md5 "$md5" '.builds[].ota.md5 |= ($md5)' "$manifest" > "$manifest.tmp" && mv "$manifest.tmp" "$manifest"
          done
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-names.outputs.base_name }}
          path: output

  check-and-tag:
    permissions:
      contents: write  # Needed to push tags.
    runs-on: ubuntu-latest
    needs: [build, get-latest-versions]
    outputs:
      tag-exists: ${{ steps.check-and-tag.outputs.exists }}
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
      - id: check-and-tag
        run: |
          tag="${{ needs.build.outputs.project-version }}"
          if git ls-remote --tags origin | grep -q "refs/tags/$tag$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"
            git fetch --tags
            git tag "$tag"
            git push origin "$tag"
          fi

  publish:
    if: needs.check-and-tag.outputs.tag-exists == 'false' && (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref == 'refs/heads/main'
    needs: [prepare, build, check-and-tag]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
      - name: download-artifacts
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          files=${{ needs.prepare.outputs.files }}
          for file in $(echo '${{ needs.prepare.outputs.files }}' | jq -r '.[]'); do
            echo "Downloading artifact for $file"
            gh run download --name $(basename "$file" .yaml) --dir output || true
          done
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: output
          clean: ${{ inputs.clean }}
          force: false
          attempt-limit: 6